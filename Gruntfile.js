module.exports = function( grunt ) {

    "use strict";

    var srcHintOptionsBrowser = grunt.file.readJSON("src/.jshintrc"),
        srcHintOptionsNode    = grunt.file.readJSON("src/.jshintrc");
    srcHintOptionsBrowser.browser = true;
    srcHintOptionsNode.node = true;

    grunt.initConfig({
        pkg: grunt.file.readJSON("package.json"),
        clean: {
            "data-api": [
                "<%= concat['data-api-browser'].dest %>",
                "<%= Object.keys(uglify['data-api-browser'].files)[0] %>",
                "<%= uglify['data-api-browser'].options.sourceMap %>"
            ]
        },
        preprocess: {
            "data-api-browser": {
                dest: "dist/data-api/v1/js/mt-data-api.js",
                src: "src/data-api/v1/mt-data-api.js"
            },
            "data-api-node": {
                dest: "lib/data-api/v1/node-mt-data-api.js",
                src: "src/data-api/v1/node-mt-data-api.js"
            }
        },
        watch: {
            "data-api": {
                files: [ "src/**/*.js" ],
                tasks: "dev"
            }
        },
        uglify: {
            "data-api-browser": {
                files: {
                    "dist/data-api/v1/js/mt-data-api.min.js": [ "dist/data-api/v1/js/mt-data-api.js" ]
                },
                options: {
                    banner: "/* Copyright (c) 2013 Six Apart, Ltd.\n * This file is generated by Movable Type DataAPI SDK for JavaScript.\n * Consult the source files for their respective licenses and copyrights.\n * <%= pkg.homepage %>\n */\n",
                    sourceMap: "dist/data-api/v1/js/mt-data-api.min.map",
                    sourceMapPrefix: 4,
                    sourceMappingURL: "mt-data-api.min.map",
                    report: "min",
                    beautify: {
                        ascii_only: true
                    },
                    compress: {
                        if_return: false,
                        hoist_funs: false,
                        join_vars: false,
                        loops: false,
                        unused: false
                    },
                    mangle: {
                        // saves some bytes when gzipped
                        except: ["undefined"]
                    }
                }
            }
        },
        jshint: {
            "data-api-browser": {
                src: [
                    "src/data-api/common/core.js",
                    "src/data-api/common/cookie.js",
                    "src/data-api/common/endpoints.js",
                    "src/data-api/common/exports.js"
                ],
                options: srcHintOptionsBrowser
            },
            "data-api-node": {
                src: [
                    "src/data-api/common/core.js",
                    "src/data-api/common/cookie.js",
                    "src/data-api/common/endpoints.js",
                    "src/data-api/common/exports.js",
                    "src/data-api/common/window.js",
                    "src/data-api/common/sessionstore-fs.js",
                    "lib/movabletype.js"
                ],
                options: srcHintOptionsNode
            },
            grunt: {
                src: ["Gruntfile.js"],
                options: {
                    jshintrc: ".jshintrc"
                }
            }
        }
    });

    grunt.registerTask("update-data-api-endpoints", function() {
        var done  = this.async(),
            ver   = process.env.MT_DATA_API_VERSION,
            path  = require("path"),
            fs    = require("fs"),
            exec  = require("child_process").exec,
            base  = path.dirname(fs.realpathSync(__filename)),
            dest  = path.join(base, "src", "data-api", "v" + ver, "endpoints.json"),
            bin   = path.join(base, "bin/data-api-endpoints"),
            cmd   = [
                bin,
                process.env.MT_DATA_API_BASE_URL,
                ver
            ].join(" ");

        exec(cmd, function(err, stdout, stderr) {
            if (err) {
                console.error(stderr);
                return done(false);
            }

            fs.writeFileSync(dest, stdout, "utf8");

            done();
        });
    });

    grunt.loadNpmTasks("grunt-contrib-jshint");
    grunt.loadNpmTasks("grunt-contrib-clean");
    grunt.loadNpmTasks("grunt-contrib-watch");
    grunt.loadNpmTasks("grunt-contrib-uglify");
    grunt.loadNpmTasks("grunt-preprocess");

    grunt.registerTask("default", "build");
    grunt.registerTask("build", ["preprocess", "jshint", "uglify"]);
    grunt.registerTask("dev", ["preprocess", "jshint"]);
};
